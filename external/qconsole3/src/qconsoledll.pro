######################################################################
# Automatically generated by qmake (1.05a) Mon Jul 18 19:50:31 2005
######################################################################

# To build on Mac OS
# export QTDIR=/Users/cmeyer/Developer/Applications/qt-48
# $QTDIR/bin/qmake qconsoledll.pro
# make debug release
# make install

# To build on Windows
# qmake qconsoledll.pro
# nmake debug
# nmake release
# copy files to external

TEMPLATE = lib
DEPENDPATH += include src
INCLUDEPATH += . include
unix {
    CONFIG += no_keywords debug_and_release staticlib qt
}
else {
    CONFIG += no_keywords debug_and_release absolute_library_soname qt
}
greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

DEFINES += USE_POPUP_COMPLETER

# Input
HEADERS += include/qconsole.h
SOURCES += src/qconsole.cpp

# see http://www.qtcentre.org/threads/30564-What-Does-qtLibraryTarget()-Do
defineReplace(qtLibraryTarget) {
   unset(LIBRARY_NAME)
   LIBRARY_NAME = $$1
   mac:!static:contains(QT_CONFIG, qt_framework) {
      QMAKE_FRAMEWORK_BUNDLE_NAME = $$LIBRARY_NAME
      export(QMAKE_FRAMEWORK_BUNDLE_NAME)
   }
   contains(TEMPLATE, .*lib):CONFIG(debug, debug|release) {
      !debug_and_release|build_pass {
          mac:RET = $$member(LIBRARY_NAME, 0)_debug
          else:win32:RET = $$member(LIBRARY_NAME, 0)d
      }
   }
   isEmpty(RET):RET = $$LIBRARY_NAME
   return($$RET)
}

TARGET = $$qtLibraryTarget(QConsole)

macx {
    CONFIG += lib_bundle

    CONFIG(debug, debug|release) {
        LINKLIBDIR = debug
    }
    CONFIG(release, debug|release) {
        LINKLIBDIR = release
    }

    FRAMEWORK_HEADERS.version = Versions
    FRAMEWORK_HEADERS.files = include/qconsole.h
    FRAMEWORK_HEADERS.path = Headers
    QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS

    target.path = $$[QT_INSTALL_LIBS]
    INSTALLS += target
}

win32 {
    win32-msvc2010 {
        CONFIG += staticlib
    }

win32-msvc2012 {
        # CONFIG += staticlib
    }
}
